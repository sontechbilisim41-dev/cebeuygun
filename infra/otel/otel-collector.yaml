receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
        
        - job_name: 'microservices'
          scrape_interval: 15s
          static_configs:
            - targets: 
              - 'auth-service:8001'
              - 'catalog-service:8002'
              - 'order-service:8003'
              - 'payment-service:8004'
              - 'courier-service:8005'
              - 'notification-service:8006'
              - 'reporting-service:8007'
              - 'integration-gateway:8008'
          metrics_path: /metrics
          
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_binary:
        endpoint: 0.0.0.0:6832

  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048
  
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s
  
  resource:
    attributes:
      - key: environment
        value: ${ENVIRONMENT}
        action: upsert
      - key: service.version
        value: ${SERVICE_VERSION}
        action: upsert
      - key: deployment.environment
        value: ${DEPLOYMENT_ENV}
        action: upsert
  
  attributes:
    actions:
      - key: http.user_agent
        action: delete
      - key: http.request.header.authorization
        action: delete
      - key: db.statement
        action: hash
  
  span:
    name:
      to_attributes:
        rules:
          - ^\/api\/v1\/(?P<version>\w+)\/(?P<resource>\w+).*
      from_attributes:
        - service.name
        - operation.name

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      environment: ${ENVIRONMENT}
    
  jaeger:
    endpoint: jaeger-collector:14250
    tls:
      insecure: true
  
  elasticsearch:
    endpoints: 
      - http://elasticsearch:9200
    logs_index: otel-logs
    traces_index: otel-traces
    metrics_index: otel-metrics
    mapping:
      mode: raw
    
  kafka:
    brokers: 
      - kafka:9092
    topic: otel-events
    encoding: otlp_proto
    
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    labels:
      attributes:
        service.name: "service_name"
        service.version: "service_version"
        deployment.environment: "environment"

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  
  pprof:
    endpoint: 0.0.0.0:1777
  
  zpages:
    endpoint: 0.0.0.0:55679
  
  memory_ballast:
    size_mib: 64

service:
  extensions: [health_check, pprof, zpages, memory_ballast]
  pipelines:
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [memory_limiter, resource, attributes, span, batch]
      exporters: [jaeger, elasticsearch]
    
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, elasticsearch]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [elasticsearch, loki]

  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888