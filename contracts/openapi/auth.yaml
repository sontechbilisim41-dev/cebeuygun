openapi: 3.0.3
info:
  title: Authentication API
  description: User authentication and authorization API
  version: 1.0.0
servers:
  - url: http://localhost/api/auth/v1
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        phone:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [customer, seller, courier, admin]
        status:
          type: string
          enum: [pending, active, suspended, banned]
        email_verified:
          type: boolean
        phone_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - phone
        - first_name
        - last_name
        - role
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        phone:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [customer, seller, courier]

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string
        refresh_token:
          type: string

    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
        new_password:
          type: string
          minLength: 8

    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        code:
          type: integer

paths:
  /register:
    post:
      summary: Register new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
        '409':
          description: User already exists

  /login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
        '403':
          description: Account suspended or banned

  /refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid refresh token

  /logout:
    post:
      summary: User logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '401':
          description: Invalid token

  /forgot-password:
    post:
      summary: Request password reset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'

  /reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
        '400':
          description: Invalid or expired token

  /me:
    get:
      summary: Get current user profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid token